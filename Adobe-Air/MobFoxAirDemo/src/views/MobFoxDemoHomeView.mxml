<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" title="MobFox Adobe-Air Demo 1.01.07"
		creationComplete="init()">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	
	<fx:Script>
		<![CDATA[
			import com.mobfox.air.plugin.MobFoxPluginController;
			import com.mobfox.air.plugin.events.MobFoxPluginEvent;
			
			private var controller:MobFoxPluginController = MobFoxPluginController.instance;
			
			// Put your inventory id here:
			//private var myBannerHash:String       = "8769bb5eb962eb39170fc5d8930706a9";
			private var myBannerHash:String       = "fe96717d9875b9da4339ea5367eff1ec";
			private var myInterstitialHash:String = "267d72ac3f77a3f447b32cf7ebf20673";
			private var myNativeHash:String       = "a764347547748896b84e0b8ccd90fd62";
			//private var myNativeHash:String       = "80187188f458cfde788d961b6882fd53";
			//private var myNativeHash:String       = "1122334455667788788d961b6882fd53";

			private var clickUrl:String = "";

			//================================================================
			
			private function init():void {
				// add listener
				
				controller.addEventListener( MobFoxPluginEvent.BANNER_ERROR, onBannerError );
				controller.addEventListener( MobFoxPluginEvent.BANNER_READY, onBannerReady );
				controller.addEventListener( MobFoxPluginEvent.BANNER_CLOSED, onBannerClosed );
				controller.addEventListener( MobFoxPluginEvent.BANNER_CLICKED, onBannerClicked );
				controller.addEventListener( MobFoxPluginEvent.BANNER_FINISHED, onBannerFinished );
				
				controller.addEventListener( MobFoxPluginEvent.INTERSTITIAL_READY, onInterstitialReady );
				controller.addEventListener( MobFoxPluginEvent.INTERSTITIAL_ERROR, onInterstitialError );
				controller.addEventListener( MobFoxPluginEvent.INTERSTITIAL_CLOSED, onInterstitialClosed );
				controller.addEventListener( MobFoxPluginEvent.INTERSTITIAL_FINISHED, onInterstitialFinished );
				controller.addEventListener( MobFoxPluginEvent.INTERSTITIAL_CLICKED, onInterstitialClicked );
				controller.addEventListener( MobFoxPluginEvent.INTERSTITIAL_SHOWN, onInterstitialShown );
				
				controller.addEventListener( MobFoxPluginEvent.NATIVE_READY, onNativeReady );
				controller.addEventListener( MobFoxPluginEvent.NATIVE_ERROR, onNativeError );
			}
						
			//================================================================

			private function onBannerError( event:MobFoxPluginEvent ):void {
				trace( "onBannerError" );
				controller.showToastText("onBannerError");
			}
			
			private function onBannerReady( event:MobFoxPluginEvent ):void {
				trace( "onBannerReady" );
				controller.showToastText("onBannerReady");
			}
			
			private function onBannerClosed( event:MobFoxPluginEvent ):void {
				trace( "onBannerClosed" );
				controller.showToastText("onBannerClosed");
			}
			
			private function onBannerClicked( event:MobFoxPluginEvent ):void {
				trace( "onBannerClicked" );
				controller.showToastText("onBannerClicked");
			}
			
			private function onBannerFinished( event:MobFoxPluginEvent ):void {
				trace( "onBannerFinished" );
				controller.showToastText("onBannerFinished");
			}
			
			//--------------------------------------------------------------
			
			private function onInterstitialReady( event:MobFoxPluginEvent ):void {
				trace( "onInterstitialReady" );
				controller.showToastText("onInterstitialReady");
				
				controller.showInterstitial();
			}
			
			private function onInterstitialError( event:MobFoxPluginEvent ):void {
				trace( "onInterstitialError" );
				controller.showToastText("onInterstitialError");
			}
			
			private function onInterstitialClosed( event:MobFoxPluginEvent ):void {
				trace( "onInterstitialClosed" );
				controller.showToastText("onInterstitialClosed");
			}
			
			private function onInterstitialFinished( event:MobFoxPluginEvent ):void {
				trace( "onInterstitialFinished" );
				controller.showToastText("onInterstitialFinished");
			}
			
			private function onInterstitialClicked( event:MobFoxPluginEvent ):void {
				trace( "onInterstitialClicked" );
				controller.showToastText("onInterstitialClicked");
			}
			
			private function onInterstitialShown( event:MobFoxPluginEvent ):void {
				trace( "onInterstitialShown" );
				controller.showToastText("onInterstitialShown");
			}
			
			//--------------------------------------------------------------
			
			private function onNativeReady( event:MobFoxPluginEvent ):void {
				trace( "onNativeReady" );
				
				var lines:String = event.eventData;
				var params:Array = lines.split("|");
				var i:uint, tot:uint;
				tot = params.length;
				for (i=0;i<tot;i++)
				{
					var line:String = params[i];
					
					if (line.substring(0,10)=="<Headline>")
					{
						nativeTitle.text = line.substring(10);
					}
					if (line.substring(0,13)=="<Description>")
					{
						nativeBody.text = line.substring(13);
					}
					if (line.substring(0,14)=="<IconImageUrl>")
					{
						var iconPictLdr:Loader = new Loader(); 
						iconPictLdr.load(new URLRequest(line.substring(14))); 
						iconPictLdr.contentLoaderInfo.addEventListener(Event.COMPLETE, iconImgLoaded);  
						function iconImgLoaded(event:Event):void 
						{ 
							nativeIcon.source = iconPictLdr.content;
						}
					}
					if (line.substring(0,14)=="<MainImageUrl>")
					{
						var mainPictLdr:Loader = new Loader(); 
						mainPictLdr.load(new URLRequest(line.substring(14))); 
						mainPictLdr.contentLoaderInfo.addEventListener(Event.COMPLETE, mainImgLoaded);  
						function mainImgLoaded(event:Event):void 
						{ 
							nativeMain.source = mainPictLdr.content;
						}
					}
					if (line.substring(0,10)=="<ClickUrl>")
					{
						clickUrl = line.substring(10);
					}
				}
			}
			
			private function onNativeError( event:MobFoxPluginEvent ):void {
				trace( "onNativeError" );
				controller.showToastText("onNativeError");
			}
			
			//================================================================
			
			private function onCheckboxChanged( event:Event ):void {
				var value:Boolean = useLocationCheckbox.selected;
				trace( "Set checkbox to:", value );
				
				controller.showToastText("Set checkbox to:"+value);
				
				controller.setUseLocation(value);
			}

			private function onShowBannerPressed( event:Event ):void {
				trace( "Show BANNER" );
				controller.showToastText("onShowBannerPressed");
				
				controller.createBanner(myBannerHash, 20, 50, 320, 50);
			}
			
			private function onHideBannerPressed( event:Event ):void {
				trace( "Hide BANNER" );
				controller.showToastText("onHideBannerPressed");
				
				controller.hideBanner();
			}
			
			private function onUnhideBannerPressed( event:Event ):void {
				trace( "Unhide BANNER" );
				controller.showToastText("onUnhideBannerPressed");
				
				controller.unhideBanner();
			}
			
			private function onShowInterstitialPressed( event:Event ):void {
				trace( "Show INTERSTITIAL" );
				controller.showToastText("onShowInterstitialPressed");
				
				controller.createInterstitial(myInterstitialHash);
			}
			
			private function onShowNativePressed( event:Event ):void {
				trace( "Show NATIVE" );				
				controller.showToastText("onShowNativePressed");
				
				controller.createNative(myNativeHash);
			}
			
			private function onNativePressed( event:Event ):void {
				trace( "Native ad pressed" );
				if (clickUrl.length>0)
				{
					var urlReq:URLRequest = new URLRequest(clickUrl); 
					navigateToURL(urlReq);					
				}
			}
			
		]]>
	</fx:Script>

	<s:VGroup width="100%" height="100%" verticalAlign="middle" horizontalAlign="center">       

		<s:Spacer width="10" height="60" />			
		
		<s:HGroup width="400" verticalAlign="top" horizontalAlign="left">
			<s:Button label="Banner" click="onShowBannerPressed(event)" styleName="next"/>   
			<s:Button label="Hide" click="onHideBannerPressed(event)" styleName="next"/>   
			<s:Button label="Unhide" click="onUnhideBannerPressed(event)" styleName="next"/>   
		</s:HGroup>
		
		<s:HGroup width="400" verticalAlign="top" horizontalAlign="left">
			<s:Button label="Interstitial" click="onShowInterstitialPressed(event)" styleName="next"/>   
			<s:Button label="Native" click="onShowNativePressed(event)" styleName="next"/>   
		</s:HGroup>
		
		<s:CheckBox width="400" label="Use location (for iPhone)" id="useLocationCheckbox" change="onCheckboxChanged(event)" styleName="next"/>

		<s:VGroup width="400"  horizontalAlign="left" id="nativeButton" click="onNativePressed(event)">
			<s:HGroup width="400" height="80" verticalAlign="top">
				<s:BitmapImage width="80" height="80" id="nativeIcon"/>
				<s:Spacer width="10" height="5" />			
				<s:Label text="" id="nativeTitle" width="400" />
			</s:HGroup> 
			<s:Spacer width="10" height="5" />			
			<s:Label text=" " id="nativeBody" width="400" />
			<s:Spacer width="10" height="5" />			
			<s:HGroup width="400" height="157">
				<s:BitmapImage width="300" height="157" horizontalAlign="left" id="nativeMain"/>
			</s:HGroup> 
		</s:VGroup>

	</s:VGroup>

	
</s:View>
